import { app, BrowserWindow, ipcMain, nativeImage, Tray } from 'electron';
import * as fs from "fs";
import * as path from "path";
import puppeteer from 'puppeteer-core';
import pie from "puppeteer-in-electron";
import trayIcon from "../public/images/tradew1nd-icon.png";
import winIcon from "../public/images/tradew1nd-win.png";
import { addQueues, clearQueues, getQueues, getDownloading, setBrowser, setDataPath, setDownloadPath, setQueuePath, setMainWindow, getMainWindow, setPlaying } from './state';
import { watch } from 'chokidar';
import { RuntimeSoundTrack, SoundTrack } from './classes/music';
import { downloadTrack, fixTrackId } from './helpers/downloader';
import { parseFile } from 'music-metadata';
import { opus, VolumeTransformer } from 'prism-media';
import Speaker from 'speaker';

// Path setup
const dataPath = setDataPath(app.getPath("userData"));
const queuePath = setQueuePath(path.resolve(dataPath, "queues"));
if (!fs.existsSync(queuePath)) fs.mkdirSync(queuePath);
const downloadPath = setDownloadPath(path.resolve(dataPath, "tracks"));
if (!fs.existsSync(downloadPath)) fs.mkdirSync(downloadPath);

// Puppeteer setup
pie.initialize(app).then(async () => setBrowser(await pie.connect(app, <any> puppeteer)));

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = () => {
  // Create the browser window.
  const tray = new Tray(nativeImage.createFromDataURL(trayIcon));
  const win = setMainWindow(new BrowserWindow({
    width: 1280,
    height: 720,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
    },
    icon: nativeImage.createFromDataURL(winIcon),
    show: false
  }));

  win.maximize();
  win.show();

  tray.on("click", () => {
    if (win.isVisible()) win.hide();
    else win.show();
  });

  // and load the index.html of the app.
  win.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  win.webContents.openDevTools();
};

const setupEvents = () => {
  function readQueues() {
    clearQueues();
    const downloaded = fs.readdirSync(downloadPath);
    for (const file of fs.readdirSync(queuePath)) {
      if (!file.endsWith(".json")) continue;
      const tracks = <SoundTrack[]> JSON.parse(fs.readFileSync(path.resolve(queuePath, file), { encoding: "utf8" }));
      const rtTracks: RuntimeSoundTrack[] = [];
      var needFix = false;
      for (const track of tracks) {
        needFix = !!fixTrackId(track) || needFix;
        const rtTrack = <RuntimeSoundTrack> track;
        if (downloaded.find(d => d === track.id)) rtTrack.downloaded = true;
        rtTracks.push(rtTrack);
      }
      if (needFix) fs.writeFileSync(path.resolve(queuePath, file), JSON.stringify(rtTracks.map(t => ({
        id: t.id,
        title: t.title,
        url: t.url,
        type: t.type,
        time: t.time,
        volume: t.volume,
        thumbnail: t.thumbnail
      })), null, 2));
      addQueues({ name: file.slice(0, -5), tracks: rtTracks });
    }
    getMainWindow().webContents.send("update-queues", getQueues());
  }

  const watcher = watch(queuePath, { persistent: true });
  watcher.on("add", readQueues).on("change", readQueues).on("unlink", readQueues);
  readQueues();

  const downloadWatcher = watch(downloadPath, { persistent: true });
  downloadWatcher.on("unlink", readQueues);

  ipcMain.on("request-queues", (event) => {
    event.sender.send("update-queues", getQueues());
  });

  ipcMain.on("request-queue-download", async (event, queue: string) => {
    const tracks = getQueues().get(queue);
    if (!tracks) return;
    getDownloading().push(queue);
    event.sender.send("update-states", { downloading: getDownloading() });
    const failed: RuntimeSoundTrack[] = [];
    async function downloadFromArray(arr: RuntimeSoundTrack[], retry: boolean) {
      for (const track of arr) {
        const file = path.resolve(downloadPath, track.id);
        if (fs.existsSync(file)) continue;
        try {
          console.log("Downloading", track.title, `(${track.id})`);
          track.downloading = true;
          event.sender.send("update-queues", getQueues());
          await downloadTrack(track);
          track.downloaded = true;
        } catch (err) {
          console.log("An error has occured while downloading the track", track.title);
          console.error(err);
          if (fs.existsSync(file))
            fs.rmSync(file);
          if (retry) failed.push(track);
        } finally {
          track.downloading = false;
          event.sender.send("update-queues", getQueues());
        }
      }
    }
    await downloadFromArray(tracks, true);
    if (failed.length) {
      console.log("Retrying soundtracks that failed to be downloaded:", failed.length);
      await downloadFromArray(failed, false);
    }
    getDownloading().splice(getDownloading().indexOf(queue), 1);
    event.sender.send("update-states", { downloading: getDownloading() });
  });

  ipcMain.on("request-states", (event) => {
    event.sender.send("update-states", { downloading: getDownloading() });
  });

  ipcMain.on("request-play", async (event, queue: string, id: string) => {
    const metadata = await parseFile(path.resolve(downloadPath, id));
    console.log(metadata);
    const stream = fs.createReadStream(path.resolve(downloadPath, id))
      .pipe(new opus.WebmDemuxer())
      .pipe(new opus.Decoder({ rate: metadata.format.sampleRate, channels: metadata.format.numberOfChannels, frameSize: 960 }))
      .pipe(new VolumeTransformer({ type: "s16le", volume: 0.5 }));

    stream.pipe(new Speaker({ sampleRate: metadata.format.sampleRate, channels: metadata.format.numberOfChannels }));
  });
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  createWindow();
  setupEvents();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
