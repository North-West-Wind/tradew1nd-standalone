import * as crypto from "crypto";
import { app, BrowserWindow, dialog, ipcMain, nativeImage, session, shell, Tray } from 'electron';
import * as fs from "fs";
import * as path from "path";
import puppeteer from 'puppeteer-core';
import pie from "puppeteer-in-electron";
import trayIcon from "../public/images/tradew1nd-icon.png";
import winIcon from "../public/images/tradew1nd-win.png";
import { addQueues, clearQueues, getQueues, getDownloading, setBrowser, setDataPath, setDownloadPath, setQueuePath, setMainWindow, getMainWindow, setPlaying, getPlaying } from './state';
import { watch } from 'chokidar';
import { RuntimeSoundTrack, SoundTrack } from './classes/music';
import { downloadTrack } from './helpers/downloader';
import { TradeW1ndPlayer } from './classes/player';
import { fixTrack, saveRuntimeToQueue } from "./helpers/queue";
import { clamp, isBetween } from "./helpers/misc";
import ElectronStore from "electron-store";

// Path setup
const dataPath = setDataPath(app.getPath("userData"));
const queuePath = setQueuePath(path.resolve(dataPath, "queues"));
if (!fs.existsSync(queuePath)) fs.mkdirSync(queuePath);
const downloadPath = setDownloadPath(path.resolve(dataPath, "tracks"));
if (!fs.existsSync(downloadPath)) fs.mkdirSync(downloadPath);

// Electron config setup
const storage = new ElectronStore();

// Puppeteer setup
pie.initialize(app).then(async () => setBrowser(await pie.connect(app, <any> puppeteer)));

// Player setup
const player = new TradeW1ndPlayer();
{
  let volume = storage.get("volume");
  if (typeof volume !== "number") volume = 1;
  player.setVolume((<number> volume) * 100);

  player.on("volume", volume => storage.set("volume", volume));
}

// Variables
var currentRequestId: string;

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = () => {
  // Create the browser window.
  const tray = new Tray(nativeImage.createFromDataURL(trayIcon));
  const win = setMainWindow(new BrowserWindow({
    width: 1280,
    height: 720,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
    },
    icon: nativeImage.createFromDataURL(winIcon),
    show: false
  }));

  win.maximize();
  win.show();

  tray.on("click", () => {
    if (win.isVisible()) win.hide();
    else win.show();
  });

  // and load the index.html of the app.
  win.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  win.webContents.openDevTools();
}

const setupEvents = () => {
  function readQueues() {
    clearQueues();
    const downloaded = fs.readdirSync(downloadPath);
    const playing = getPlaying();
    for (const file of fs.readdirSync(queuePath)) {
      if (!file.endsWith(".json")) continue;
      const tracks = <SoundTrack[]> JSON.parse(fs.readFileSync(path.resolve(queuePath, file), { encoding: "utf8" }));
      const rtTracks: RuntimeSoundTrack[] = [];
      var needFix = false;
      for (const track of tracks) {
        needFix = fixTrack(track) || needFix;
        const rtTrack = <RuntimeSoundTrack> track;
        if (downloaded.find(d => d === track.id)) rtTrack.downloaded = true;
        if (playing?.queue === file.slice(0, -5) && playing.id === track.id) rtTrack.playing = true;
        rtTracks.push(rtTrack);
      }
      addQueues({ name: file.slice(0, -5), tracks: rtTracks });
      if (needFix) saveRuntimeToQueue(file.slice(0, -5));
    }
    getMainWindow().webContents.send("update-queues", getQueues());
  }

  const watcher = watch(queuePath, { persistent: true });
  watcher.on("add", readQueues).on("change", readQueues).on("unlink", readQueues);
  readQueues();

  const downloadWatcher = watch(downloadPath, { persistent: true });
  downloadWatcher.on("unlink", readQueues);

  ipcMain.on("request-queues", (event) => {
    event.sender.send("update-queues", getQueues());
  });

  ipcMain.on("request-queue-download", async (event, queue: string) => {
    const tracks = getQueues().get(queue);
    if (!tracks) return;
    getDownloading().push(queue);
    event.sender.send("update-states", { downloading: getDownloading() });
    const failed: RuntimeSoundTrack[] = [];
    async function downloadFromArray(arr: RuntimeSoundTrack[], retry: boolean) {
      for (const track of arr) {
        const file = path.resolve(downloadPath, track.id);
        if (fs.existsSync(file)) continue;
        try {
          console.log("Downloading", track.title, `(${track.id})`);
          track.downloading = true;
          event.sender.send("update-queues", getQueues());
          await downloadTrack(track);
          track.downloaded = true;
        } catch (err) {
          console.log("An error has occured while downloading the track", track.title);
          console.error(err);
          if (fs.existsSync(file))
            fs.rmSync(file);
          if (retry) failed.push(track);
        } finally {
          track.downloading = false;
          event.sender.send("update-queues", getQueues());
        }
      }
    }
    await downloadFromArray(tracks, true);
    if (failed.length) {
      console.log("Retrying soundtracks that failed to be downloaded:", failed.length);
      await downloadFromArray(failed, false);
    }
    getDownloading().splice(getDownloading().indexOf(queue), 1);
    event.sender.send("update-states", { downloading: getDownloading() });
  });

  ipcMain.on("request-states", (event) => {
    event.sender.send("update-states", { downloading: getDownloading(), playing: getPlaying() });
    event.sender.send("update-options", { autoplay: player.autoplay, random: player.random, loop: player.loop, repeat: player.repeat });
    event.sender.send("update-paused", (player.togglingPause && !player.paused) || player.paused);
    event.sender.send("update-volume", player.volume);
  });

  ipcMain.on("request-play", async (event, queue: string, id: string, seek?: number) => {
    const requestId = crypto.createHash("md5").update(`${Date.now()}`).digest("hex");
    currentRequestId = requestId;
    const tracks = getQueues().get(queue);
    if (!tracks) return;
    async function play(id: string) {
      const track = tracks.find(t => t.id === id);
      if (!track) return;
      if (!track.downloaded) {
        const file = path.resolve(downloadPath, track.id);
        if (fs.existsSync(file)) track.downloaded;
        else {
          try {
            console.log("Downloading", track.title, `(${track.id})`);
            track.downloading = true;
            event.sender.send("update-queues", getQueues());
            await downloadTrack(track);
            track.downloaded = true;
          } catch (err) {
            console.log("An error has occured while downloading the track", track.title);
            console.error(err);
            if (fs.existsSync(file))
              fs.rmSync(file);
          } finally {
            track.downloading = false;
            event.sender.send("update-queues", getQueues());
          }
        }
      }

      if (player.playing) await player.finish();

      const beforeVolume = track.volume;

      player.once("play", playerId => {
        if (track.id !== playerId) return;
        track.playing = true;
        event.sender.send("update-queues", getQueues());
        event.sender.send("update-states", { playing: setPlaying({ queue, id }) });
      }).once("finish", playerId => {
        if (track.id !== playerId && playerId) return;
        track.playing = false;
        if (track.volume !== beforeVolume) saveRuntimeToQueue(queue);
        else event.sender.send("update-queues", getQueues());
  
        if (currentRequestId !== requestId) return;
    
        if (player.repeat) return play(track.id);
        if (player.autoplay) {
          // Update tracks variable
          const tracks = getQueues().get(queue);
          const thisTrack = tracks.find(t => t.id === track.id);
          const index = tracks.indexOf(thisTrack);
          var id: string;
          if (player.random) id = tracks[Math.floor(tracks.length * Math.random())].id; // Choose random track
          else {
            if (index == tracks.length - 1) {
              if (player.loop) id = tracks[0].id;
              else return;
            } else id = tracks[index + 1].id;
          }
          return play(id);
        }

        event.sender.send("update-states", { playing: setPlaying(null) });
      });
  
      player.playId(track, seek);
      seek = 0;
    }

    await play(id);
  });

  ipcMain.on("request-stop", (event) => {
    currentRequestId = undefined;
    player.finish();
    event.sender.send("update-states", { playing: setPlaying(null) });
  });

  ipcMain.on("request-choose-file", async (event) => {
    const result = await dialog.showOpenDialog({ properties: ['openFile', 'multiSelections'], filters: [{ name: "Music Files", extensions: ["*"] }] });
    event.sender.send("return-choose-file", result.canceled ? undefined : result.filePaths);
  });

  ipcMain.on("request-add-track", async (event, uri: string) => {

  });

  ipcMain.on("set-options", (event, options: { autoplay?: boolean, random?: boolean, loop?: boolean, repeat?: boolean }) => {
    if (options.autoplay !== undefined) player.autoplay = options.autoplay;
    if (options.random !== undefined) player.random = options.random;
    if (options.loop !== undefined) player.loop = options.loop;
    if (options.repeat !== undefined) player.repeat = options.repeat;
    event.sender.send("update-options", options);
  });

  ipcMain.on("set-paused", (_event, paused: boolean) => {
    if (paused) player.pause();
    else player.resume();
  });

  ipcMain.on("set-volume", (_event, volume: number) => {
    player.setVolume(volume);
  });

  ipcMain.on("set-local-volume", (event, volume: number) => {
    const playing = getPlaying();
    if (!playing) return;
    const track = getQueues().get(playing.queue)?.find(t => t.id === playing.id);
    if (track) {
      track.volume = clamp(volume / 100, 0, 2);
      player.setVolume(player.volume * 100, volume);
      event.sender.send("update-queues", getQueues());
    }
  });

  // Milliseconds
  ipcMain.on("set-start-end", (_event, start: number, end: number) => {
    const playing = getPlaying();
    if (!playing) return;
    const track = getQueues().get(playing.queue)?.find(t => t.id === playing.id);
    if (track) {
      track.start = start;
      track.end = end;
      saveRuntimeToQueue(playing.queue);
    }
  });

  ipcMain.on("set-track-pos", (_event, queue: string, currentPos: number, newPos: number) => {
    const tracks = getQueues().get(queue);
    if (!tracks || !isBetween(currentPos, 0, tracks.length - 1) || !isBetween(newPos, 0, tracks.length - 1)) return;
    const track = tracks.splice(currentPos, 1);
    getQueues().set(queue, tracks.slice(0, newPos).concat(track, tracks.slice(newPos)));
    saveRuntimeToQueue(queue);
  });

  player.on("pause", () => getMainWindow().webContents.send("update-paused", true));
  player.on("resume", () => getMainWindow().webContents.send("update-paused", false));
  player.on("volume", volume => getMainWindow().webContents.send("update-volume", volume));
  player.on("playback", time => getMainWindow().webContents.send("update-time", time));

  getMainWindow().webContents.on('will-navigate', (details) => {
    if (getMainWindow().webContents.getURL() == details.url) return;
    details.preventDefault();
    shell.openExternal(details.url);
  });
}

const electronSettings = () => {
  // Electron settings
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': ['img-src http: https: data:']
      }
    })
  });
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  electronSettings();
  createWindow();
  setupEvents();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Turn off ongoing streams when quitting
app.on("before-quit", () => {
  player.finish();
});